//1.with setInterval
//first solution
function printNumbers(from, to) {
  let current = from;
  function go() {
    console.log(current);
    if (current == to) clearInterval(timerId);
    current++;
  }
  go(); //to make first call happens immediately
  let timerId = setInterval(go, 1000);
}
printNumbers(3, 5);
//second solution
// function printNumbers(from, to) {
//   from += printNumbers.counter;
//   if (from == to) {
//     console.log(from);
//     clearTimeout(timerId);
//   } else {
//     console.log(from);
//   }
//   printNumbers.counter++;
// }
// printNumbers.counter = 0;
// let timerId = setInterval(printNumbers, 1000, 6, 10);

//----------------------------------
//2.with setTimeout
//first solution
function printNumbers(from, to) {
  let current = from;
  let timerId = setTimeout(function go() {
    console.log(current);
    if (current < to) {
      current++;
      timerId = setTimeout(go, 1000);
    } else {
      clearTimeout(timerId);
    }
  }, 1000);
}
printNumbers(3, 5);
//second solution
// let timerId2 = setTimeout(
//   function printNumbers2(from, to) {
//     if (from == to) {
//       console.log(from);
//       clearTimeout(timerId2);
//     } else {
//       console.log(from);
//       from++;
//       timerId2 = setTimeout(printNumbers2, 1000, from, to);
//     }
//   },
//   1000,
//   6,
//   10
// );
//----------------------------------------------------------------
// In the code below thereâ€™s a setTimeout call scheduled, then a heavy calculation is run, 
// that takes more than 100ms to finish.When will the scheduled function run?
// After the loop.-->answer
// Before the loop.
// In the beginning of the loop.
// What is alert going to show?-->answer 100000000
let i = 0;
setTimeout(() => console.log(i), 100); // ?
// assume that the time to execute this function is >100ms
for (let j = 0; j < 100000000; j++) {
  i++;
}
